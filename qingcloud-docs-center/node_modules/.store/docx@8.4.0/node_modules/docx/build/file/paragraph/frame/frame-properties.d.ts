import { HorizontalPositionAlign, VerticalPositionAlign } from '../../shared/alignment';
import { HeightRule } from '../../table';
import { XmlAttributeComponent, XmlComponent } from '../../xml-components';
export declare const DropCapType: {
    readonly NONE: "none";
    readonly DROP: "drop";
    readonly MARGIN: "margin";
};
export declare const FrameAnchorType: {
    readonly MARGIN: "margin";
    readonly PAGE: "page";
    readonly TEXT: "text";
};
export declare const FrameWrap: {
    readonly AROUND: "around";
    readonly AUTO: "auto";
    readonly NONE: "none";
    readonly NOT_BESIDE: "notBeside";
    readonly THROUGH: "through";
    readonly TIGHT: "tight";
};
interface IBaseFrameOptions {
    readonly anchorLock?: boolean;
    readonly dropCap?: (typeof DropCapType)[keyof typeof DropCapType];
    readonly width: number;
    readonly height: number;
    readonly wrap?: (typeof FrameWrap)[keyof typeof FrameWrap];
    readonly lines?: number;
    readonly anchor: {
        readonly horizontal: (typeof FrameAnchorType)[keyof typeof FrameAnchorType];
        readonly vertical: (typeof FrameAnchorType)[keyof typeof FrameAnchorType];
    };
    readonly space?: {
        readonly horizontal: number;
        readonly vertical: number;
    };
    readonly rule?: (typeof HeightRule)[keyof typeof HeightRule];
}
export interface IXYFrameOptions extends IBaseFrameOptions {
    readonly position: {
        readonly x: number;
        readonly y: number;
    };
}
export interface IAlignmentFrameOptions extends IBaseFrameOptions {
    readonly alignment: {
        readonly x: (typeof HorizontalPositionAlign)[keyof typeof HorizontalPositionAlign];
        readonly y: (typeof VerticalPositionAlign)[keyof typeof VerticalPositionAlign];
    };
}
export type IFrameOptions = IXYFrameOptions | IAlignmentFrameOptions;
export declare class FramePropertiesAttributes extends XmlAttributeComponent<{
    readonly anchorLock?: boolean;
    readonly dropCap?: (typeof DropCapType)[keyof typeof DropCapType];
    readonly width: number;
    readonly height: number;
    readonly x?: number;
    readonly y?: number;
    readonly wrap?: (typeof FrameWrap)[keyof typeof FrameWrap];
    readonly lines?: number;
    readonly anchorHorizontal?: (typeof FrameAnchorType)[keyof typeof FrameAnchorType];
    readonly anchorVertical?: (typeof FrameAnchorType)[keyof typeof FrameAnchorType];
    readonly spaceHorizontal?: number;
    readonly spaceVertical?: number;
    readonly rule?: (typeof HeightRule)[keyof typeof HeightRule];
    readonly alignmentX?: (typeof HorizontalPositionAlign)[keyof typeof HorizontalPositionAlign];
    readonly alignmentY?: (typeof VerticalPositionAlign)[keyof typeof VerticalPositionAlign];
}> {
    protected readonly xmlKeys: {
        anchorLock: string;
        dropCap: string;
        width: string;
        height: string;
        x: string;
        y: string;
        anchorHorizontal: string;
        anchorVertical: string;
        spaceHorizontal: string;
        spaceVertical: string;
        rule: string;
        alignmentX: string;
        alignmentY: string;
        lines: string;
        wrap: string;
    };
}
export declare class FrameProperties extends XmlComponent {
    constructor(options: IFrameOptions);
}
export {};
