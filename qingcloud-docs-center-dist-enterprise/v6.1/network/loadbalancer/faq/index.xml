<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>常见问题 on 用户指南</title>
    <link>/v6.1/network/loadbalancer/faq/</link>
    <description>Recent content in 常见问题 on 用户指南</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>©2022 QingCloud, Inc. All rights reserved</copyright><atom:link href="/v6.1/network/loadbalancer/faq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何排查负载均衡后端不可用问题？</title>
      <link>/v6.1/network/loadbalancer/faq/after_end_miss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/after_end_miss/</guid>
      <description>问题现象 通过控制台看到到后端服务器的状态为 不可用，如下图。
排查方法 确认 LB 和后端云服务器网络相同（属于同一私有网）。
运行命令 netstat -an | grep 80 查看本地服务是否正常，服务端口是否处于监听状态。
查看云服务器是否绑定安全组，且安全组是否放行相应端口。
通过其他网络相同云服务器测试主机网络和端口是否正常。
若以上排查均无问题依然显示不可用，可提交工单联系技术支持协助排查。</description>
    </item>
    
    <item>
      <title>访问负载均衡器返回502/503/504是什么原因？</title>
      <link>/v6.1/network/loadbalancer/faq/lb_502_503_504/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/lb_502_503_504/</guid>
      <description>错误代码说明 代理服务器常见错误代码：
502（Bad Gateway）：作为代理或网关使用的服务器从请求响应链的下一条链路上收到了一条伪响应。
503（Service Unavailable）：说明服务器现在无法为请求提供服务（暂时不可用），将来可以。
504 （Gateway Time-out）：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器或者辅助服务器收到响应。
原因分析 访问负载均衡器时返回502/503/504时，说明请求已经到达了负载均衡器，负载均衡器和后端交互时出现了问题。
负载均衡器返回502原因
502状态码错误提示表明负载均衡可以将来自客户端的请求转发到后端服务器，但是由于服务器中 Web 应用处理异常，导致出现该提示，所以排错的方向是针对服务器中 Web 应用的配置以及运行情况进行分析。
负载均衡器返回503原因
503状态码表示后端服务不可用，负载均衡器无法将请求发送到后端服务器，所以排查方向主要针对于负载均衡器和后端服务器之间的网络问题，以及后端服务器是否存活等问题进行分析。
负载均衡器返回504原因
504状态码表示该负载均衡器能够连接后端服务器，但在读取服务器响应的时候超时了。所在排查问题时，应该注意负载均衡器的超时时间、后端服务器服务器负载、网络延迟、后端服务器的进程是否正常等问题。
处理方法 负载均衡问题
检查负载均衡状态，查看是否存在健康检查失败的情况，如果有则需要先排查健康检查失败原因。
负载均衡器开启 rsyslog，通过日志来排查问题。
在七层（HTTP/HTTPS）监听配置中，连接请求超时时间默认值为50秒，若后端云服务器对 PHP 请求的处理时间超过60秒，此时负载均衡器会返回504状态码。
说明 如果无法确定是否是负载均衡器的问题，可以在客户端的hosts文件中，将域名解析至后端服务器的IP地址上进行访问。由此来绕过负载均衡器。来检测访问是否正常。
后端服务器问题
如果5XX状态码间断发生，很可能是某一台后端实例的问题。在客户端的 hosts 文件中，将域名解析至后端服务器的 IP 地址上进行访问，检查是否是某一台后端问题。
如果确定是后端服务器问题，请按照以下步骤进行排查：
检查服务器 CPU，内存，磁盘IO等负载是否正常。此外对于部分服务来说，数据盘的使用空间也会影响到服务是否正常。
结合业务日志排查问题。
检查服务器网络，防火墙是否有开启限制，检查 TCP、UDP连接池是否占满。</description>
    </item>
    
    <item>
      <title>七层（HTTP/HTTPS）健康检查异常</title>
      <link>/v6.1/network/loadbalancer/faq/http_check_failed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/http_check_failed/</guid>
      <description>本文介绍负载均衡器七层健康检查出现异常时的解决方法。
问题现象 负载均衡器上配置了如下图的基于七层方式的健康检查，但是健康检查结果显示为不活跃。
排查方法 七层（HTTP/HTTPS）健康检查是基于第七层的 HTTP 协议进行的，会和业务进行交互，所以首先应该定位问题，主要分为以下几步：
定位健康检查失败问题出现在第七层还是第四层。
点击监听器的操作 &amp;gt; 修改 &amp;gt; 显示高级选项，将健康检查修改为 TCP，观察后端服务器的状态是否为活跃状态：
如果仍旧是不活跃状态，则说明健康检查问题出在第四层，请参考四层（TCP/UDP）健康检查出现异常进行解决。
如果是活跃状态，则说明是后端服务本身配置有问题。继续进行下一步分析。
登录后端服务器，检查健康检查 URL 是否正常。
登录到后端服务器上使用 curl 命令访问健康检查接口，根据返回的 HTTP 状态码排查问题。
如果返回的 HTTP 状态码为 4xx 或者 5xx，那么 LB 去检查时遇到 4xx 或者 5xx 就会判断为服务不可用，此时则需要根据服务日志来排查后端服务问题。
以下排查方法供您参考：
root@web:~# curl http://172.16.6.20/health #检查命令 curl http://&amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;url&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body bgcolor=&amp;#34;white&amp;#34;&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt; &amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.14.0 (Ubuntu)&amp;lt;/center&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; root@web:~# cat /var/www/html/health #配置健康检查接口 i am ok root@web:~# curl http://172.16.6.20/health #此时本地调用是成功的，控制台也可以看到健康检查成功了 i am ok 如果返回的 HTTP 状态码小于 400，此时则需要判断是否为健康检查超时所导致的。</description>
    </item>
    
    <item>
      <title>四层（TCP/UDP）健康检查出现异常</title>
      <link>/v6.1/network/loadbalancer/faq/tcp_check_fialed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/tcp_check_fialed/</guid>
      <description>本文介绍负载均衡器四层健康检查出现异常的解决方法。
问题现象 负载均衡器上配置了如下图的基于四层方式的健康检查，但是健康检查结果显示为不活跃。
原因分析 TCP 和 UDP 的健康检查是基于第四层协议进行的，所以只会探测到端口是否存活，并不会去检测业务是否正常。所以一般来说如果四层健康检查失败，可能有以下原因：
后端服务器和负载均衡器之间的网络不通。
后端服务器上的端口并没有存活。
排查方法 检查负载均衡器上所配置的后端服务器的端口是否存活。
在后端服务器上执行以下命令：
telnet &amp;lt;$ip&amp;gt; &amp;lt;port&amp;gt; #此命令用来探测这台机器的80端口是否能够正常连接 如果上述命令执行失败，则需要检查后端业务是否正常运行，或者后端服务器监听的端口和负载均衡器上所配置的端口是否一致。
以下排查过程可供您参考（以 nginx 为例）。
root@web:~# systemctl status nginx.service #查看nginx状态是否正常 ● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: inactive (dead) since Sun 2021-05-30 14:19:48 CST; 43s ago root@web:~# systemctl start nginx.service #启动nginx状态是否正常 root@web:~# ss -nutlp |grep 80 #检查80端口是否正常 root@web:~# ss -nutlp |grep nginx #检查nginx所启动的端口 tcp LISTEN 0 128 0.</description>
    </item>
    
    <item>
      <title>使用 UDP 协议健康检查有什么注意事项？</title>
      <link>/v6.1/network/loadbalancer/faq/udp_healthy_check_notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/udp_healthy_check_notes/</guid>
      <description>UDP 方式会结合 ICMP Echo Request 和 UDP port probe 两种方式来检查，需注意：
对于监听器为 UDP 端口组，且健康检查为 UDP 时，健康检查只会检测端口组的第一个端口。
需保证后端能够正确响应 ICMP Echo Request（即返回 ICMP Echo Reply包，ICMP code: 0/0），并且能返回 ICMP Destination Port Unreachable 包，ICMP code: 3/3）。如果后端有加载安全组或者有其安全组策略，要保证其上行中相应的策略是放行的。</description>
    </item>
    
    <item>
      <title>如何开启 HTTP2？</title>
      <link>/v6.1/network/loadbalancer/faq/lb_turn_on_http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/lb_turn_on_http2/</guid>
      <description>背景信息 目前 HTTP2 的使用越来越广泛，相对来说，HTTP2 会比 HTTP1.1 更加地高效。HTTP2 最大的特点是使用多路复用，对同一个域的服务器只建立一次 TCP 连接，加载多个资源，使用二进制帧传输，同时会对 HTTP 头部进行压缩。HTTP2 在实现上基本上只支持 HTTPS 。
负载均衡器支持开启 HTTP2，由于负载均衡器节点和后端在一个内网中，速度很快，故后端业务无需支持 HTTP2。
操作步骤 创建或修改 HTTPS 监听器时，点击下方的显示高级选项。
在附加选项中勾选启用HTTP2.0。</description>
    </item>
    
    <item>
      <title>开启 HTTP2 不生效怎么办？</title>
      <link>/v6.1/network/loadbalancer/faq/enable_http2_not_take_effect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/enable_http2_not_take_effect/</guid>
      <description>问题现象 在 HTTPS 监听器中勾选了启用HTTP2.0，但通过 curl 命令发现还是使用的 HTTP1.1 协议。
curl -v --http2 https://test.com *** *** &amp;gt; GET / HTTP/1.1 *** 解决办法 查看 curl 返回信息中关于 ALPN 的日志，该日志为 HTTPS 上协商 HTTP 版本的过程。
重启负载均衡器。
部分用户使用的 LB 为较早之前创建的，镜像版本不支持开启 HTTP2.0 ，此时可以重启下 LB，会自动更新到最新的镜像版本，并支持开启 HTTP2.0。
启用 TCP 监听器。
部分用户在后端开启了 HTTP2 ，LB 不支持在 LB 及后端同时开启 HTTP2。此时需要使用 TCP 监听器，端口为后端服务监听的端口。</description>
    </item>
    
    <item>
      <title>如何开启长连接？</title>
      <link>/v6.1/network/loadbalancer/faq/lb_long_connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/lb_long_connection/</guid>
      <description>HTTP 监听开启长连接 如图，在 HTTP 监听器设置中，勾选上 keep-alive 即可。
TCP 监听开启长连接 TCP 监听默认开启长连接。
负载方式推荐使用最少连接：优先将请求发给拥有最少连接数的后端服务器，常用于长连接服务，例如数据库连接等服务。</description>
    </item>
    
    <item>
      <title>如何获取来访者的真实 IP？</title>
      <link>/v6.1/network/loadbalancer/faq/lb_get_real_ip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/lb_get_real_ip/</guid>
      <description>方法一 在负载均衡器的监听器页面，点击操作 &amp;gt; 修改，修改监听器设置，设置通过 HTTP 的头字段为 X-Forwarded-For 获取客户端的真实 IP，如下图。
该功能未开启时，通过 access.log 查看到客户端的 IP 地址实际上是负载均衡器节点 IP ，一般为198.19.x.x。
该功能开启后，通过访问 access.log 查看的日志如下。
方法二 通过开启透明代理（可能会导致内网请求失败），请在只提供公网服务（绑定了公网 IP）时开启，一般用于 TCP 协议的监听器。建议使用 tcpdump 命令抓包来获取真实 IP。</description>
    </item>
    
    <item>
      <title>如何检查负载均衡器会话保持是否生效？</title>
      <link>/v6.1/network/loadbalancer/faq/lb_check_session_hold/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/lb_check_session_hold/</guid>
      <description>您可以通过 curl 命令测试会话保持是否生效。
背景信息 负载均衡器支持源 IP 地址、负载均衡器 Cookie 、植入 Cookie 前缀、重写 Cookie 、后端 Cookie 实现会话保持，详见会话保持。
准备工作 在后端云服务器中创建测试页面，测试页面的名称需要一致，分别写入不同的内容，以此区分每个后端。
四层监听测试 说明 四层监听基于源 IP 算法作为负载方式来实现会话保持。
运行以下命令，多次访问测试页面，查看返回结果是否一致，若返回结果一致说明会话保持已生效，反之则说明会话保持无效
curl http://1.1.1.1/check.html 七层监听测试 说明 如果会话保持默认模式是植入 Cookie ，而 curl 命令默认不保存和发送 Cookie。需要预先保存相应的 Cookie，再进行测试。否则，curl 测试结果将是随机的，影响测试结果的准确性。
访问测试页面，保存 Cookie 值。
curl -D test.cookie http://1.1.1.1/check.html 使用保存的 Cookie 多次访问，查看返回结果。
如果多次访问返回结果一致，说明会话保持已生效，反之则说明会话保持无效
curl -b test.cookie http://1.1.1.1/check.html 相关问题 如何排查负载均衡器会话保持不生效问题？</description>
    </item>
    
    <item>
      <title>如何排查负载均衡器会话保持不生效问题？</title>
      <link>/v6.1/network/loadbalancer/faq/resolve_check_session_hold/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/resolve_check_session_hold/</guid>
      <description>若负载均衡器会话保持不生效，可通过如下步骤进行排查：
查看后端服务器组上是否开启了会话保持。
查看后端云服务器的健康检查状态是否正常，如果异常，流量会切换到其他后端云服务器，导致会话保持失效。
如果选择的是源 IP 算法，需要注意请求到达弹性负载均衡之前 IP 是否发生变化。
如果是 HTTP 或 HTTPS 监听器，配置了会话保持，需要注意发送的请求是否带有 Cookie ，如果带有 Cookie ，则观察该 Cookie 值是否发生了变化（因为七层会话保持基于 Cookie ）。</description>
    </item>
    
    <item>
      <title>负载均衡器支持什么类型的会话保持？</title>
      <link>/v6.1/network/loadbalancer/faq/seesion_support_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/seesion_support_type/</guid>
      <description>负载均衡器支持基于源 IP 和 cookie 植入的会话保持。详见会话保持说明。</description>
    </item>
    
    <item>
      <title>长连接和会话保持有什么关系？</title>
      <link>/v6.1/network/loadbalancer/faq/long_cnet_session_hold/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/long_cnet_session_hold/</guid>
      <description>长连接和会话保持没有必然联系。长连接是指在一个连接上可以连续发送多个数据包，在连接保持期间，如果没有数据包发送，需要双方发链路检测包。会话保持是指弹性负载均衡将属于同一个会话的请求都转发到同一个服务器进行处理。</description>
    </item>
    
    <item>
      <title>如何启用 WebSocket 支持？</title>
      <link>/v6.1/network/loadbalancer/faq/enable_websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/enable_websocket/</guid>
      <description>负载均衡器详情界面，在监听器配置界面开启 Keep-Alive，可以通过 Connection 字段配置 Keep-Alive ，保持 HTTP 连接不中断。</description>
    </item>
    
    <item>
      <title>负载均衡器如何支持多证书？</title>
      <link>/v6.1/network/loadbalancer/faq/lb_bind_multi_cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/lb_bind_multi_cert/</guid>
      <description>操作场景 本文指导用户通过 HTTPS 和 SSL 监听器绑定多个 SSL 证书，实现同一个监听器根据多个域名自动选择 SSL 证书加密传输访问后端的需求。
前提条件 已创建 HTTPS/SSL 监听器，具体步骤可参考添加 HTTPS 监听器、添加 SSL 监听器。
已创建 SSL 证书并完成验证。
操作步骤 登录管理控制台，选择产品与服务 &amp;gt; 网络 &amp;gt; 负载均衡器，进入负载均衡器页面。
在负载均衡器列表，找到目标实例，点击实例 ID 号，进入实例详情页。
选择监听协议为 HTTPS 或 SSL 的监听器，点击右上角的操作 &amp;gt; 修改。
在弹出的修改监听器属性中点击添加服务器证书，选择证书并添加即可。
说明 可通过多次点击添加服务器证书来添加多个证书。</description>
    </item>
    
    <item>
      <title>如何分析 rsyslog 日志？</title>
      <link>/v6.1/network/loadbalancer/faq/haproxy_log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/haproxy_log/</guid>
      <description>针对负载均衡器相关的问题排查，通常会通过配置 rsyslog 来进行分析问题所在，本文详细介绍如何来分析日志。
TCP 转发日志 日志格式：
Mar 29 12:16:55 198.19.56.127 haproxy[686]: 111.47.226.115:17652 [29/Mar/2021:10:32:46.135] lbl-l1rmzsj5 lbl-l1rmzsj5_default/lbb-mfc8im36 1/0/6249762 92826 -- 1/1/1/0/0 0/0 #haproxy[686]: #process_name &amp;#39;[&amp;#39; pid &amp;#39;]:&amp;#39; #111.47.226.115:17652 #client_ip &amp;#39;:&amp;#39; client_port #[29/Mar/2021:10:32:46.135] #&amp;#39;[&amp;#39; accept_date &amp;#39;]&amp;#39; #lbl-l1rmzsj5 #frontend_name #lbl-l1rmzsj5_default/lbb-mfc8im36 #backend_name #1/0/6249762 #Tw &amp;#39;/&amp;#39; Tc &amp;#39;/&amp;#39; Tt* #92826 #bytes_read* #-- #termination_state #1/1/1/0/0 #actconn &amp;#39;/&amp;#39; feconn &amp;#39;/&amp;#39; beconn &amp;#39;/&amp;#39; srv_conn &amp;#39;/&amp;#39; retries* #0/0 #srv_queue &amp;#39;/&amp;#39; backend_queue 字段说明：
字段 说明 client_ip
连接到 haproxy 的客户端的 IP 地址</description>
    </item>
    
    <item>
      <title>业务日志中出现“Connection reset by peer”的错误怎么办？</title>
      <link>/v6.1/network/loadbalancer/faq/connection_peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v6.1/network/loadbalancer/faq/connection_peer/</guid>
      <description>问题现象 负载均衡后端配置 TCP 服务端口后，后端业务日志中频繁出现类似如下网络连接异常的错误信息。首先可以通过抓包分析这条日志产生是否是负载均衡器的锁发出的请求导致，如果不是则需要检查其他地方配置是否有问题。本文主要分析由负载均衡器产生的问题。
问题原因 该问题和负载均衡的健康检查机制有关。由于 TCP 对上层业务状态无感知，同时，为降低负载均衡健康检查成本和对后端业务的冲击，负载均衡针对 TCP 协议服务端口的健康检查只会做简单的 TCP 三次握手，而后直接发送 RST 包断开 TCP 连接。
简单的来说，四层健康检查，会对后端服务器发起一次请求，后端服务器的服务端口只要应答了负载均衡器则认为此次检查是成功的，就会主动关闭连接，并未进行业务层面上的数据交互，从而导致上层业务（例如 Java 连接池等）认为相应的连接是异常的。
解决方法 对于以上情况主要有两种解决方法。
方法1：更换 TCP 协议为 HTTP 协议。
此方案是将健康检查更换七层健康检查，会进行业务层面的数据交互，所以也需要后端服务提供相应的接口去供 LB 进行健康检查。
方法2：在业务层面，对来自 LB 服务器 IP 地址段的相关请求做日志过滤，忽略相关错误信息。
此方案仍旧是基于第四层的健康检查，因为业务日志中出现此报错就已经代表四层健康检查成功了，所这个报错本身就可以忽略。</description>
    </item>
    
  </channel>
</rss>
